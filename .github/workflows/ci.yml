name: CI

on:
  push:
    branches: [ main, dev ]
  pull_request:
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g. 0.1.3)'
        required: true

env:
  REVISION: 0.1-SNAPSHOT

jobs:
  build:
    name: Build ${{ matrix.name }}
    runs-on: ${{ matrix.runner }}
    continue-on-error: ${{ matrix.allow-failure || false }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: linux-x86_64
            runner: ubuntu-22.04
            classifier: linux_amd64
            lib-name: libopenzl_jni.so
            run-tests: true
            allow-failure: false
          - name: macos-arm64
            runner: macos-14
            classifier: macos_arm64
            lib-name: libopenzl_jni.dylib
            run-tests: true
            allow-failure: false
          - name: windows-x86_64
            runner: windows-2022
            classifier: windows_amd64
            lib-name: openzl_jni.dll
            run-tests: true
            allow-failure: false

    steps:
      - uses: actions/checkout@v4

      - name: Set up Temurin JDK
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 21

      - name: Install build dependencies (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y cmake ninja-build

      - name: Install build dependencies (macOS)
        if: runner.os == 'macOS'
        run: |
          brew update
          brew install cmake ninja || true

      - name: Install MinGW toolchain (Windows)
        if: runner.os == 'Windows'
        shell: powershell
        run: |
          choco install llvm --yes
          choco install mingw --yes
          choco install make --yes
          choco install cmake --yes

      - name: Configure CMake
        shell: bash
        run: |
          if [ "${{ runner.os }}" = "Windows" ]; then
            cmake -S . -B cmake_build -G "MinGW Makefiles" \
              -DCMAKE_BUILD_TYPE=Release \
              -DCMAKE_C_COMPILER=clang.exe \
              -DCMAKE_CXX_COMPILER=clang++.exe
          else
            cmake -S . -B cmake_build -G Ninja -DCMAKE_BUILD_TYPE=Release
          fi

      - name: Re-apply vendored source patches after configure
        shell: bash
        run: |
          if [ -f "${{ github.workspace }}/patches/fix_future_capture.py" ]; then
            python3 "${{ github.workspace }}/patches/fix_future_capture.py" || true
          fi

      - name: Build native library
        shell: bash
        run: |
          if [ "${{ runner.os }}" = "Windows" ]; then
            cmake --build cmake_build --target openzl_jni -- -j 2
          else
            cmake --build cmake_build --target openzl_jni
          fi

      - name: Stage native artifact
        shell: bash
        run: |
          dest="JNI/openzl-jni/src/main/resources/lib/${{ matrix.classifier }}"
          mkdir -p "$dest"
          if [ "${{ runner.os }}" = "Windows" ]; then
            if [ -f "cmake_build/${{ matrix.lib-name }}" ]; then
              cp "cmake_build/${{ matrix.lib-name }}" "$dest/"
            elif [ -f "cmake_build/cli/${{ matrix.lib-name }}" ]; then
              cp "cmake_build/cli/${{ matrix.lib-name }}" "$dest/"
            else
              echo "Unable to locate built library for Windows target"
              ls cmake_build
              exit 1
            fi
          else
            cp "cmake_build/cli/${{ matrix.lib-name }}" "$dest/"
          fi

      - name: Package classifier (with tests)
        if: matrix.run-tests == true
        shell: bash
        run: |
          mvn -ntp -f JNI/pom.xml -pl openzl-jni -am \
            -Drevision=${REVISION} \
            -Dplatform.classifier=${{ matrix.classifier }} \
            -Dgpg.skip=true clean package

      - name: Package classifier (skip tests)
        if: matrix.run-tests != true
        shell: bash
        run: |
          mvn -ntp -f JNI/pom.xml -pl openzl-jni -am \
            -Drevision=${REVISION} \
            -Dplatform.classifier=${{ matrix.classifier }} \
            -Dgpg.skip=true -DskipTests clean package

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: openzl-jni-${{ matrix.classifier }}
          retention-days: 7
          path: |
            JNI/openzl-jni/target/*${{ matrix.classifier }}*.jar
            JNI/openzl-jni/target/openzl-jni-${REVISION}.jar
            JNI/openzl-jni/src/main/resources/lib/${{ matrix.classifier }}/**

  coverage:
    name: Coverage
    needs: build
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4

      - name: Set up Temurin JDK
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 21

      - name: Install build dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y cmake ninja-build

      - name: Configure CMake
        run: cmake -S . -B cmake_build -G Ninja -DCMAKE_BUILD_TYPE=Release

      - name: Re-apply vendored source patches after configure
        run: |
          if [ -f "${{ github.workspace }}/patches/fix_future_capture.py" ]; then
            python3 "${{ github.workspace }}/patches/fix_future_capture.py" || true
          fi

      - name: Build native library
        run: cmake --build cmake_build --target openzl_jni

      - name: Stage native artifact
        run: |
          dest="JNI/openzl-jni/src/main/resources/lib/linux_amd64"
          mkdir -p "$dest"
          cp "cmake_build/cli/libopenzl_jni.so" "$dest/"

      - name: Generate coverage report
        run: |
          mvn -ntp -f JNI/pom.xml -pl openzl-jni -am \
            org.jacoco:jacoco-maven-plugin:0.8.11:prepare-agent \
            test \
            org.jacoco:jacoco-maven-plugin:0.8.11:report

      - name: Attach coverage artifact
        uses: actions/upload-artifact@v4
        with:
          name: jacoco-report
          retention-days: 7
          path: JNI/openzl-jni/target/site/jacoco

      - name: Summarize coverage
        id: coverage-summary
        run: |
          python3 <<'PY'
import os
import xml.etree.ElementTree as ET
from pathlib import Path

report = ET.parse('JNI/openzl-jni/target/site/jacoco/jacoco.xml').getroot()
totals = {c.get('type'): (int(c.get('missed')), int(c.get('covered'))) for c in report.findall('counter')}

def line(name):
    missed, covered = totals.get(name, (0, 0))
    total = missed + covered
    pct = 0.0 if total == 0 else covered * 100.0 / total
    return pct, covered, total

sections = []
for metric in ('LINE', 'BRANCH', 'METHOD'):
    pct, covered, total = line(metric)
    sections.append(f"- {metric.title()}: {pct:.2f}% ({covered}/{total})")

summary = "## Coverage Summary\n" + "\n".join(sections) + "\n"

Path("coverage-summary.txt").write_text(summary, encoding="utf-8")

with open(os.environ['GITHUB_STEP_SUMMARY'], 'a', encoding='utf-8') as fh:
    fh.write(summary)
PY

      - name: Upload coverage summary
        uses: actions/upload-artifact@v4
        with:
          name: coverage-summary
          retention-days: 7
          path: coverage-summary.txt

      - name: Comment coverage on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const summary = fs.readFileSync('coverage-summary.txt', 'utf8');
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: summary
            });

  publish:
    name: Publish Artifacts
    needs:
      - build
      - coverage
    if: github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-22.04
    env:
      MAVEN_USERNAME: ${{ secrets.MAVEN_USERNAME }}
      MAVEN_PASSWORD: ${{ secrets.MAVEN_PASSWORD }}
      GPG_KEY_ID: ${{ secrets.GPG_KEY_ID || '' }}
    steps:
      - name: Check required parameters
        run: |
          if [ -z "${{ github.event.inputs.version }}" ]; then
            echo "version input is required when manually publishing."
            exit 1
          fi
      - uses: actions/checkout@v4

      - name: Configure Maven settings
        run: |
          mkdir -p "${HOME}/.m2"
          cat <<EOF > "${HOME}/.m2/settings.xml"
          <settings>
            <servers>
              <server>
                <id>central</id>
                <username>${MAVEN_USERNAME}</username>
                <password>${MAVEN_PASSWORD}</password>
              </server>
            </servers>
            <profiles>
              <profile>
                <id>ossrh-release</id>
                <properties>
                  <gpg.executable>gpg</gpg.executable>
                  <gpg.keyname>${GPG_KEY_ID}</gpg.keyname>
                </properties>
              </profile>
            </profiles>
            <activeProfiles>
              <activeProfile>ossrh-release</activeProfile>
            </activeProfiles>
          </settings>
          EOF

      - name: Set up Temurin JDK for publishing
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 21
          server-id: central
          server-username: MAVEN_USERNAME
          server-password: MAVEN_PASSWORD
          gpg-private-key: ${{ secrets.GPG_PRIVATE_KEY || '' }}

      - name: Download classifier artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: openzl-jni-*
          path: release-artifacts
          merge-multiple: false

      - name: Set release version in POM
        run: |
          mvn -ntp -f JNI/pom.xml versions:set \
            -DnewVersion=${{ github.event.inputs.version }} \
            -DgenerateBackupPoms=false

      - name: Build and publish release
        shell: bash
        env:
          RELEASE_VERSION: ${{ github.event.inputs.version }}
        run: |
          set -euo pipefail
          classifiers=(linux_amd64 macos_arm64 windows_amd64)
          rm -rf JNI/openzl-jni/src/main/resources/lib
          mkdir -p JNI/openzl-jni/src/main/resources/lib
          rm -rf release-packages
          for classifier in "${classifiers[@]}"; do
            dest="JNI/openzl-jni/src/main/resources/lib/${classifier}"
            mkdir -p "${dest}"
            src_dir=$(find "release-artifacts/openzl-jni-${classifier}" -maxdepth 10 -type d -path "*/src/main/resources/lib/${classifier}" | head -n 1 || true)
            if [ -z "${src_dir}" ] || [ ! -d "${src_dir}" ]; then
              echo "Expected resources for ${classifier} not found under release-artifacts/openzl-jni-${classifier}"
              find "release-artifacts/openzl-jni-${classifier}" -maxdepth 10 -type d || true
              exit 1
            fi
            cp -R "${src_dir}/." "${dest}/"
          done
          mvn --batch-mode -ntp -f JNI/openzl-jni/pom.xml \
            -Drevision=${RELEASE_VERSION} \
            -DskipTests \
            -Dgpg.passphraseServerId= \
            clean package central-publishing:publish
          mkdir -p release-packages/base
          cp JNI/openzl-jni/target/openzl-jni-${RELEASE_VERSION}.jar release-packages/base/
          cp JNI/openzl-jni/target/openzl-jni-${RELEASE_VERSION}.jar.asc release-packages/base/ || true
          cp JNI/openzl-jni/target/openzl-jni-${RELEASE_VERSION}-sources.jar release-packages/base/ || true
          cp JNI/openzl-jni/target/openzl-jni-${RELEASE_VERSION}-sources.jar.asc release-packages/base/ || true
          cp JNI/openzl-jni/target/openzl-jni-${RELEASE_VERSION}-javadoc.jar release-packages/base/ || true
          cp JNI/openzl-jni/target/openzl-jni-${RELEASE_VERSION}-javadoc.jar.asc release-packages/base/ || true
          cp JNI/openzl-jni/pom.xml release-packages/base/openzl-jni-${RELEASE_VERSION}.pom
          for classifier in "${classifiers[@]}"; do
            mkdir -p release-packages/${classifier}
            cp JNI/openzl-jni/target/openzl-jni-${RELEASE_VERSION}-${classifier}.jar release-packages/${classifier}/
            cp JNI/openzl-jni/target/openzl-jni-${RELEASE_VERSION}-${classifier}.jar.asc release-packages/${classifier}/ || true
          done

      - name: Upload release bundle
        uses: actions/upload-artifact@v4
        with:
          name: openzl-jni-release-${{ github.event.inputs.version }}
          retention-days: 14
          path: release-packages/**
