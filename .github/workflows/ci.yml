name: CI

on:
  push:
    branches: [ main, dev ]
  pull_request:
  workflow_dispatch:

env:
  REVISION: 0.1-SNAPSHOT

jobs:
  build:
    name: Build ${{ matrix.name }}
    runs-on: ${{ matrix.runner }}
    continue-on-error: ${{ matrix.allow-failure || false }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: linux-x86_64
            runner: ubuntu-22.04
            classifier: linux_amd64
            lib-name: libopenzl_jni.so
            run-tests: true
            allow-failure: false
          - name: linux-aarch64
            runner: ubuntu-22.04-arm64
            classifier: linux_aarch64
            lib-name: libopenzl_jni.so
            run-tests: false
            allow-failure: false
          - name: macos-x86_64
            runner: macos-13
            classifier: macos_x86_64
            lib-name: libopenzl_jni.dylib
            run-tests: false
            allow-failure: false
          - name: macos-arm64
            runner: macos-14
            classifier: macos_aarch64
            lib-name: libopenzl_jni.dylib
            run-tests: false
            allow-failure: false
          - name: windows-x86_64
            runner: windows-2022
            classifier: windows_amd64
            lib-name: libopenzl_jni.dll
            run-tests: false
            allow-failure: false

    steps:
      - uses: actions/checkout@v4

      - name: Set up Temurin JDK
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 21

      - name: Install build dependencies (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y cmake ninja-build

      - name: Install build dependencies (macOS)
        if: runner.os == 'macOS'
        run: |
          brew update
          brew install cmake ninja || true

      - name: Install MinGW toolchain (Windows)
        if: runner.os == 'Windows'
        shell: powershell
        run: |
          choco install llvm --yes
          choco install mingw --yes
          choco install make --yes
          choco install cmake --yes

      - name: Configure CMake
        shell: bash
        run: |
          if [ "${{ runner.os }}" = "Windows" ]; then
            cmake -S . -B cmake_build -G "MinGW Makefiles" \
              -DCMAKE_BUILD_TYPE=Release \
              -DCMAKE_C_COMPILER=clang.exe \
              -DCMAKE_CXX_COMPILER=clang++.exe
          else
            cmake -S . -B cmake_build -G Ninja -DCMAKE_BUILD_TYPE=Release
          fi

      - name: Build native library
        shell: bash
        run: |
          if [ "${{ runner.os }}" = "Windows" ]; then
            cmake --build cmake_build --target openzl_jni -- -j 2
          else
            cmake --build cmake_build --target openzl_jni
          fi

      - name: Stage native artifact
        shell: bash
        run: |
          dest="JNI/openzl-jni/src/main/resources/lib/${{ matrix.classifier }}"
          mkdir -p "$dest"
          if [ "${{ runner.os }}" = "Windows" ]; then
            cp "cmake_build/${{ matrix.lib-name }}" "$dest/"
          else
            cp "cmake_build/cli/${{ matrix.lib-name }}" "$dest/"
          fi

      - name: Run JNI tests
        if: matrix.run-tests == true
        shell: bash
        run: |
          mvn -f JNI/pom.xml -pl openzl-jni -am \
            -Drevision=${REVISION} \
            -Dplatform.classifier=${{ matrix.classifier }} \
            -Dgpg.skip=true test

      - name: Package classifier JAR
        shell: bash
        run: |
          mvn -f JNI/pom.xml -pl openzl-jni -am \
            -Drevision=${REVISION} \
            -Dplatform.classifier=${{ matrix.classifier }} \
            -Dgpg.skip=true -DskipTests package

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: openzl-jni-${{ matrix.classifier }}
          retention-days: 7
          path: |
            JNI/openzl-jni/target/*${{ matrix.classifier }}*.jar
            JNI/openzl-jni/target/*.pom
