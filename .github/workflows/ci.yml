name: CI

on:
  push:
    branches: [ main, dev ]
  pull_request:
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g. 0.1.3)'
        required: true

env:
  REVISION: 0.1-SNAPSHOT

jobs:
  build:
    name: Build ${{ matrix.name }}
    runs-on: ${{ matrix.runner }}
    continue-on-error: ${{ matrix.allow-failure || false }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: linux-x86_64
            runner: ubuntu-22.04
            classifier: linux_amd64
            lib-name: libopenzl_jni.so
            run-tests: true
            allow-failure: false
          - name: macos-arm64
            runner: macos-14
            classifier: macos_arm64
            lib-name: libopenzl_jni.dylib
            run-tests: false
            allow-failure: false
          - name: windows-x86_64
            runner: windows-2022
            classifier: windows_amd64
            lib-name: openzl_jni.dll
            run-tests: false
            allow-failure: false

    steps:
      - uses: actions/checkout@v4

      - name: Set up Temurin JDK
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 21

      - name: Install build dependencies (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y cmake ninja-build

      - name: Install build dependencies (macOS)
        if: runner.os == 'macOS'
        run: |
          brew update
          brew install cmake ninja || true

      - name: Install MinGW toolchain (Windows)
        if: runner.os == 'Windows'
        shell: powershell
        run: |
          choco install llvm --yes
          choco install mingw --yes
          choco install make --yes
          choco install cmake --yes

      - name: Configure CMake
        shell: bash
        run: |
          if [ "${{ runner.os }}" = "Windows" ]; then
            cmake -S . -B cmake_build -G "MinGW Makefiles" \
              -DCMAKE_BUILD_TYPE=Release \
              -DCMAKE_C_COMPILER=clang.exe \
              -DCMAKE_CXX_COMPILER=clang++.exe
          else
            cmake -S . -B cmake_build -G Ninja -DCMAKE_BUILD_TYPE=Release
          fi

      - name: Build native library
        shell: bash
        run: |
          if [ "${{ runner.os }}" = "Windows" ]; then
            cmake --build cmake_build --target openzl_jni -- -j 2
          else
            cmake --build cmake_build --target openzl_jni
          fi

      - name: Stage native artifact
        shell: bash
        run: |
          dest="JNI/openzl-jni/src/main/resources/lib/${{ matrix.classifier }}"
          mkdir -p "$dest"
          if [ "${{ runner.os }}" = "Windows" ]; then
            if [ -f "cmake_build/${{ matrix.lib-name }}" ]; then
              cp "cmake_build/${{ matrix.lib-name }}" "$dest/"
            elif [ -f "cmake_build/cli/${{ matrix.lib-name }}" ]; then
              cp "cmake_build/cli/${{ matrix.lib-name }}" "$dest/"
            else
              echo "Unable to locate built library for Windows target"
              ls cmake_build
              exit 1
            fi
          else
            cp "cmake_build/cli/${{ matrix.lib-name }}" "$dest/"
          fi

      - name: Package classifier (with tests)
        if: matrix.run-tests == true
        shell: bash
        run: |
          mvn -f JNI/pom.xml -pl openzl-jni -am \
            -Drevision=${REVISION} \
            -Dplatform.classifier=${{ matrix.classifier }} \
            -Dgpg.skip=true clean package

      - name: Package classifier (skip tests)
        if: matrix.run-tests != true
        shell: bash
        run: |
          mvn -f JNI/pom.xml -pl openzl-jni -am \
            -Drevision=${REVISION} \
            -Dplatform.classifier=${{ matrix.classifier }} \
            -Dgpg.skip=true -DskipTests clean package

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: openzl-jni-${{ matrix.classifier }}
          retention-days: 7
          path: |
            JNI/openzl-jni/target/*${{ matrix.classifier }}*.jar
            JNI/openzl-jni/target/openzl-jni-${REVISION}.jar
            JNI/openzl-jni/src/main/resources/lib/${{ matrix.classifier }}/**

  publish:
    name: Publish Artifacts
    needs: build
    if: github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-22.04
    environment:
      name: release
    env:
      MAVEN_USERNAME: ${{ secrets.MAVEN_USERNAME }}
      MAVEN_PASSWORD: ${{ secrets.MAVEN_PASSWORD }}
      GPG_KEY_ID: ${{ secrets.GPG_KEY_ID || '' }}
    steps:
      - name: Check required parameters
        run: |
          if [ -z "${{ github.event.inputs.version }}" ]; then
            echo "version input is required when manually publishing."
            exit 1
          fi
      - uses: actions/checkout@v4

      - name: Configure Maven settings
        run: |
          mkdir -p "${HOME}/.m2"
          cat <<EOF > "${HOME}/.m2/settings.xml"
          <settings>
            <servers>
              <server>
                <id>central</id>
                <username>${MAVEN_USERNAME}</username>
                <password>${MAVEN_PASSWORD}</password>
              </server>
            </servers>
            <profiles>
              <profile>
                <id>ossrh-release</id>
                <properties>
                  <gpg.executable>gpg</gpg.executable>
                  <gpg.keyname>${GPG_KEY_ID}</gpg.keyname>
                </properties>
              </profile>
            </profiles>
            <activeProfiles>
              <activeProfile>ossrh-release</activeProfile>
            </activeProfiles>
          </settings>
          EOF

      - name: Set up Temurin JDK for publishing
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 21
          server-id: central
          server-username: MAVEN_USERNAME
          server-password: MAVEN_PASSWORD
          gpg-private-key: ${{ secrets.GPG_PRIVATE_KEY || '' }}

      - name: Download classifier artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: openzl-jni-*
          path: release-artifacts
          merge-multiple: false

      - name: Set release version in POM
        run: |
          mvn -f JNI/pom.xml versions:set \
            -DnewVersion=${{ github.event.inputs.version }} \
            -DgenerateBackupPoms=false

      - name: Prepare release packages
        shell: bash
        env:
          RELEASE_VERSION: ${{ github.event.inputs.version }}
        run: |
          set -euo pipefail
          classifiers=(linux_amd64 macos_arm64 windows_amd64)
          rm -rf release-packages
          mkdir -p release-packages/base
          for classifier in "${classifiers[@]}"; do
            rm -rf JNI/openzl-jni/src/main/resources/lib/*
            mkdir -p JNI/openzl-jni/src/main/resources/lib/${classifier}
            src_dir=$(find "release-artifacts/openzl-jni-${classifier}" -maxdepth 10 -type d -path "*/src/main/resources/lib/${classifier}" | head -n 1 || true)
            if [ -z "${src_dir}" ] || [ ! -d "${src_dir}" ]; then
              echo "Expected resources for ${classifier} not found under release-artifacts/openzl-jni-${classifier}"
              find "release-artifacts/openzl-jni-${classifier}" -maxdepth 10 -type d || true
              exit 1
            fi
            cp -R "${src_dir}/." "JNI/openzl-jni/src/main/resources/lib/${classifier}/"
            mvn -f JNI/pom.xml -pl openzl-jni -am \
              -Drevision=${RELEASE_VERSION} \
              -Dplatform.classifier=${classifier} \
              -Dgpg.skip=true \
              -DskipTests clean package
            mkdir -p release-packages/${classifier}
            cp JNI/openzl-jni/target/openzl-jni-${RELEASE_VERSION}-${classifier}.jar release-packages/${classifier}/
          done
          cp JNI/openzl-jni/target/openzl-jni-${RELEASE_VERSION}.jar release-packages/base/
          cp JNI/openzl-jni/pom.xml release-packages/base/openzl-jni-${RELEASE_VERSION}.pom

      - name: Deploy artifacts
        shell: bash
        env:
          RELEASE_VERSION: ${{ github.event.inputs.version }}
          REPOSITORY_ID: central
          REPOSITORY_URL: https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/
        run: |
          set -euo pipefail
          passphrase_args=(-Dgpg.passphraseServerId=)
          if [ -n "${MAVEN_GPG_PASSPHRASE:-}" ]; then
            passphrase_args+=("-Dgpg.passphrase=${MAVEN_GPG_PASSPHRASE}")
          fi
          mvn --batch-mode --non-recursive gpg:sign-and-deploy-file \
            -Dfile=JNI/pom.xml \
            -DpomFile=JNI/pom.xml \
            -Dpackaging=pom \
            -DrepositoryId=${REPOSITORY_ID} \
            -Durl=${REPOSITORY_URL} \
            "${passphrase_args[@]}"
          mvn --batch-mode --non-recursive gpg:sign-and-deploy-file \
            -Dfile=release-packages/base/openzl-jni-${RELEASE_VERSION}.jar \
            -DpomFile=release-packages/base/openzl-jni-${RELEASE_VERSION}.pom \
            -DrepositoryId=${REPOSITORY_ID} \
            -Durl=${REPOSITORY_URL} \
            "${passphrase_args[@]}"
          for classifier in linux_amd64 macos_arm64 windows_amd64; do
            mvn --batch-mode --non-recursive gpg:sign-and-deploy-file \
              -Dfile=release-packages/${classifier}/openzl-jni-${RELEASE_VERSION}-${classifier}.jar \
              -DpomFile=release-packages/base/openzl-jni-${RELEASE_VERSION}.pom \
              -Dclassifier=${classifier} \
              -DrepositoryId=${REPOSITORY_ID} \
              -Durl=${REPOSITORY_URL} \
              "${passphrase_args[@]}"
          done

      - name: Upload release bundle
        uses: actions/upload-artifact@v4
        with:
          name: openzl-jni-release-${{ github.event.inputs.version }}
          retention-days: 14
          path: release-packages/**
